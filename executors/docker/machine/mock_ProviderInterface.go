package machine

import common "gitlab.com/gitlab-org/gitlab-ci-multi-runner/common"
import mock "github.com/stretchr/testify/mock"

// MockProviderInterface is an autogenerated mock type for the ProviderInterface type
type MockProviderInterface struct {
	mock.Mock
}

// CreateInternalExecutor provides a mock function with given fields:
func (_m *MockProviderInterface) CreateInternalExecutor() common.Executor {
	ret := _m.Called()

	var r0 common.Executor
	if rf, ok := ret.Get(0).(func() common.Executor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Executor)
		}
	}

	return r0
}

// Release provides a mock function with given fields: config, data
func (_m *MockProviderInterface) Release(config *common.RunnerConfig, data common.ExecutorData) error {
	ret := _m.Called(config, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(*common.RunnerConfig, common.ExecutorData) error); ok {
		r0 = rf(config, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Use provides a mock function with given fields: config, data
func (_m *MockProviderInterface) Use(config *common.RunnerConfig, data common.ExecutorData) (common.RunnerConfig, common.ExecutorData, error) {
	ret := _m.Called(config, data)

	var r0 common.RunnerConfig
	if rf, ok := ret.Get(0).(func(*common.RunnerConfig, common.ExecutorData) common.RunnerConfig); ok {
		r0 = rf(config, data)
	} else {
		r0 = ret.Get(0).(common.RunnerConfig)
	}

	var r1 common.ExecutorData
	if rf, ok := ret.Get(1).(func(*common.RunnerConfig, common.ExecutorData) common.ExecutorData); ok {
		r1 = rf(config, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(common.ExecutorData)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*common.RunnerConfig, common.ExecutorData) error); ok {
		r2 = rf(config, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

var _ ProviderInterface = (*MockProviderInterface)(nil)
