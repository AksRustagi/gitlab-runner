// Code generated by mockery v1.0.0. DO NOT EDIT.

package volumes

import context "context"
import mock "github.com/stretchr/testify/mock"

// MockCacheContainersManager is an autogenerated mock type for the CacheContainersManager type
type MockCacheContainersManager struct {
	mock.Mock
}

// Create provides a mock function with given fields: containerName, containerPath
func (_m *MockCacheContainersManager) Create(containerName string, containerPath string) (string, error) {
	ret := _m.Called(containerName, containerPath)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(containerName, containerPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(containerName, containerPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrCleanExisting provides a mock function with given fields: containerName, containerPath
func (_m *MockCacheContainersManager) FindOrCleanExisting(containerName string, containerPath string) string {
	ret := _m.Called(containerName, containerPath)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(containerName, containerPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Remove provides a mock function with given fields: ctx, id
func (_m *MockCacheContainersManager) Remove(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
